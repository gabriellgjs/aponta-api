generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id         Int    @id @default(autoincrement())
  street     String @db.VarChar(255)
  number     String @db.VarChar(50)
  district   String @db.VarChar(100)
  city       String @db.VarChar(100)
  postalCode String @db.VarChar(50)
  state      String @db.VarChar(50)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  peopleId Int
  people   People @relation(fields: [peopleId], references: [id])

  @@map("addresses")
}

model Telephone {
  id              Int    @id @default(autoincrement())
  telephoneNumber String @db.VarChar(50)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  peopleId Int
  people   People @relation(fields: [peopleId], references: [id])

  @@map("telephones")
}

model People {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(255)
  birthDate     DateTime @db.Date
  rg            String   @db.VarChar(20)
  cpf           String   @unique @db.VarChar(20)
  gender        String   @db.VarChar(100)
  maritalStatus String   @db.VarChar(100)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  employee  Employee[]
  patient   Patient[]
  telephone Telephone[]
  address   Address[]

  @@map("people")
}

model Employee {
  id       Int      @id @default(autoincrement())
  hireDate DateTime @db.Date

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  peopleId Int
  people   People @relation(fields: [peopleId], references: [id])

  appointments Appointments[]
  user         User[]

  @@map("employees")
}

model Patient {
  id     Int    @id @default(autoincrement())
  status String @db.VarChar(50)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  people       People         @relation(fields: [peopleId], references: [id])
  peopleId     Int
  appointments Appointments[]

  @@map("patients")
}

model User {
  id         Int    @id @default(autoincrement())
  status     String @db.VarChar(50)
  email      String @unique @db.VarChar(255)
  password   String @db.VarChar(255)
  roleId     Int
  employeeId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  role         Role           @relation(fields: [roleId], references: [id])
  employee     Employee       @relation(fields: [employeeId], references: [id])
  appointments Appointments[]

  userPermissions UserPermissions[]

  @@map("users")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  users           User[]
  rolePermissions RolePermissions[]

  @@map("roles")
}

model Permissions {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(100)
  description String @db.VarChar(255)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  userPermissions UserPermissions[]
  rolePermissions RolePermissions[]

  @@map("permissions")
}

model UserPermissions {
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  permission   Permissions @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([userId, permissionId])
  @@map("user_permissions")
}

model RolePermissions {
  role         Role        @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permissions @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Appointments {
  id            Int       @id @default(autoincrement())
  status        String    @db.VarChar(50)
  dataTimeStart DateTime
  dataTimeEnd   DateTime
  canceledAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  employeeId Int
  user       User     @relation(fields: [employeeId], references: [id])
  dentistId  Int
  employee   Employee @relation(fields: [dentistId], references: [id])
  patientId  Int
  patient    Patient  @relation(fields: [patientId], references: [id])

  appointmentId Int?          @unique
  appointment   Appointments? @relation("ParentAppointment", fields: [appointmentId], references: [id])
  appointments  Appointments? @relation("ParentAppointment")

  @@map("appointments")
}
